VcfFile("data/sample.vcf", samples=('HG00096', 'HG00101', 'HG00103')).fragments(batch_size=3): |-
    ->  oxbow._core.base.DataSource.fragments(batch_size=3)
        ->  oxbow._core.variant.VariantFile._batch_readers
        <-  VariantFile._batch_readers.<generator>
        ->  oxbow._core.base.DataSource._scanner
            ->  oxbow._core.base.DataSource._source
            <-  'data/sample.vcf'
            ->  oxbow._core.variant.VariantFile._scanner_kwargs
            <-  {'compressed': 'False'}
        <-  oxbow.core.PyVcfScanner.<object>
        ->  oxbow._core.variant.VariantFile._scan_kwargs
        <-  {'fields': 'None', 'genotype_by': "'sample'", 'genotype_fields': ["'GT'", "'CN'", "'CNL'", "'CNP'", "'CNQ'", "'GP'", "'GQ'", "'FT'", "'PL'"], 'info_fields': ["'DP'", "'END'", "'SVTYPE'", "'AA'", "'AC'", "'AF'", "'NS'", "'AN'", "'SAS_AF'", "'EUR_AF'", '<', '3', ' ', 'm', 'o', 'r', 'e', ' ', 'i', 't', 'e', 'm', 's', '>'], 'samples': ["'HG00096'", "'HG00101'", "'HG00103'"]}
        ->  oxbow._core.variant.VariantFile._batch_readers.<generator>
            ->  oxbow._core.base.DataSource.schema
                ->  oxbow._core.base.DataSource._scanner
                    ->  oxbow._core.base.DataSource._source
                    <-  'data/sample.vcf'
                    ->  oxbow._core.variant.VariantFile._scanner_kwargs
                    <-  {'compressed': 'False'}
                <-  oxbow.core.PyVcfScanner.<object>
                ->  oxbow._core.variant.VariantFile._schema_kwargs
                <-  {'fields': 'None', 'genotype_by': "'sample'", 'genotype_fields': ["'GT'", "'CN'", "'CNL'", "'CNP'", "'CNQ'", "'GP'", "'GQ'", "'FT'", "'PL'"], 'info_fields': ["'DP'", "'END'", "'SVTYPE'", "'AA'", "'AC'", "'AF'", "'NS'", "'AN'", "'SAS_AF'", "'EUR_AF'", '<', '3', ' ', 'm', 'o', 'r', 'e', ' ', 'i', 't', 'e', 'm', 's', '>'], 'samples': ["'HG00096'", "'HG00101'", "'HG00103'"]}
            <-  chrom: dictionary<values=string, indices=int32, ordered=0>
                pos: int32
                id: list<item: string>
                  child 0, item: string
                ref: string
                alt: list<item: string>
                  child 0, item: string
                qual: float
                filter: list<item: string>
                  child 0, item: string
                info: struct<DP: int32, END: int32, SVTYPE: string, AA: string, AC: list<item: int32>, AF: list<item: float>, NS: int32, AN: int32, SAS_AF: list<item: float>, EUR_AF: list<item: float>, AFR_AF: list<item: float>, AMR_AF: list<item: float>, EAS_AF: list<item: float>>
                  child 0, DP: int32
                  child 1, END: int32
                  child 2, SVTYPE: string
                  child 3, AA: string
                  child 4, AC: list<item: int32>
                      child 0, item: int32
                  child 5, AF: list<item: float>
                      child 0, item: float
                  child 6, NS: int32
                  child 7, AN: int32
                  child 8, SAS_AF: list<item: float>
                      child 0, item: float
                  child 9, EUR_AF: list<item: float>
                      child 0, item: float
                  child 10, AFR_AF: list<item: float>
                      child 0, item: float
                  child 11, AMR_AF: list<item: float>
                      child 0, item: float
                  child 12, EAS_AF: list<item: float>
                      child 0, item: float
                HG00096: struct<GT: struct<allele: list<item: int32>, phased: list<item: bool>>, CN: int32, CNL: list<item: float>, CNP: list<item: float>, CNQ: float, GP: list<item: float>, GQ: int32, FT: string, PL: list<item: int32>>
                  child 0, GT: struct<allele: list<item: int32>, phased: list<item: bool>>
                      child 0, allele: list<item: int32>
                          child 0, item: int32
                      child 1, phased: list<item: bool>
                          child 0, item: bool
                  child 1, CN: int32
                  child 2, CNL: list<item: float>
                      child 0, item: float
                  child 3, CNP: list<item: float>
                      child 0, item: float
                  child 4, CNQ: float
                  child 5, GP: list<item: float>
                      child 0, item: float
                  child 6, GQ: int32
                  child 7, FT: string
                  child 8, PL: list<item: int32>
                      child 0, item: int32
                HG00101: struct<GT: struct<allele: list<item: int32>, phased: list<item: bool>>, CN: int32, CNL: list<item: float>, CNP: list<item: float>, CNQ: float, GP: list<item: float>, GQ: int32, FT: string, PL: list<item: int32>>
                  child 0, GT: struct<allele: list<item: int32>, phased: list<item: bool>>
                      child 0, allele: list<item: int32>
                          child 0, item: int32
                      child 1, phased: list<item: bool>
                          child 0, item: bool
                  child 1, CN: int32
                  child 2, CNL: list<item: float>
                      child 0, item: float
                  child 3, CNP: list<item: float>
                      child 0, item: float
                  child 4, CNQ: float
                  child 5, GP: list<item: float>
                      child 0, item: float
                  child 6, GQ: int32
                  child 7, FT: string
                  child 8, PL: list<item: int32>
                      child 0, item: int32
                HG00103: struct<GT: struct<allele: list<item: int32>, phased: list<item: bool>>, CN: int32, CNL: list<item: float>, CNP: list<item: float>, CNQ: float, GP: list<item: float>, GQ: int32, FT: string, PL: list<item: int32>>
                  child 0, GT: struct<allele: list<item: int32>, phased: list<item: bool>>
                      child 0, allele: list<item: int32>
                          child 0, item: int32
                      child 1, phased: list<item: bool>
                          child 0, item: bool
                  child 1, CN: int32
                  child 2, CNL: list<item: float>
                      child 0, item: float
                  child 3, CNP: list<item: float>
                      child 0, item: float
                  child 4, CNQ: float
                  child 5, GP: list<item: float>
                      child 0, item: float
                  child 6, GQ: int32
                  child 7, FT: string
                  child 8, PL: list<item: int32>
                      child 0, item: int32
        <-  oxbow._core.variant.VariantFile._batch_readers.<locals>.<lambda>
    <-  ['oxbow._pyarrow.BatchReaderFragment.<object>']
